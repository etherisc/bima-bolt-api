

openapi: 3.0.1
info:
  title: Bima Bolt - API Server
  description: Provides Open API endpoints to caluclate policy payouts based on crop insurance product configurations, policy premiums payments, activations and percipitation values obtaines from satellite data 
  version: "1.0"

servers:
  - url: 'http://localhost:8181/api/{versionId}'
    description: OpenAPI server base path
    variables:
      versionId:
        enum:
          - v1
        default: v1
        description: API version

tags:
  - name: Activations
    description: Manage policy activations via USSD
  - name: Payments
    description: Manage premium payments via USSD
  - name: Policies
    description: Read access to policy information
  - name: Arc2
    description: Get Arc2 rainfall data, Arc2 cache monitoring
  - name: Admin
    description: Manage S3 buckets, mongoDB access
    
paths:
  /policies:
    parameters:
    - $ref: '#/components/parameters/TenantParam'
    - $ref: '#/components/parameters/EnvParam'
    get:
      tags:
        - Policies
      description: Policy information
      parameters:
        - $ref: '#/components/parameters/PhoneNo'
        - $ref: '#/components/parameters/PolicyStatusParam'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Policy'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BadRequestResponse'
  
  /policies/{order_no}:
    parameters:
    - $ref: '#/components/parameters/TenantParam'
    - $ref: '#/components/parameters/EnvParam'
    - in: path
      name: order_no
      description: The order number to provide policy information for
      schema:
        type: string
      required: true
    get:
      tags:
      - Policies
      description: Provide policy detail information
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PolicyInfo'
        '404':
          description: ERROR - No policy found for the order number provided
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
  
  /policies/{order_no}/claims:
    parameters:
    - $ref: '#/components/parameters/TenantParam'
    - $ref: '#/components/parameters/EnvParam'
    - in: path
      name: order_no
      description: The order number to provide policy information for
      schema:
        type: string
      required: true
    get:
      tags:
      - Policies
      description: Provide claims information
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Claim'
        '404':
          description: ERROR - No policy found for the order number provided
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'

  /arc2/rainfall:
    get:
      tags:
        - Arc2
      description: Get historic rainfall data
      parameters:
        - $ref: '#/components/parameters/TenantParam'
        - $ref: '#/components/parameters/EnvParam'
        - $ref: '#/components/parameters/PixelLocationParam'
        - $ref: '#/components/parameters/StartDateParam'
        - $ref: '#/components/parameters/DaysParam'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Arc2Rainfall'
        '400':
          description: Bad request
  
  /arc2/cache:
    get:
      tags:
        - Arc2
      description: Get Arc2 cache status
      parameters:
        - $ref: '#/components/parameters/TenantParam'
        - $ref: '#/components/parameters/EnvParam'
        - $ref: '#/components/parameters/StartDateParam'
        - $ref: '#/components/parameters/DaysParam'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Arc2Cache'
        '400':
          description: Bad request

  /config:
    get:
      tags:
        - Admin
      description: Get config for external components
      parameters:
        - $ref: '#/components/parameters/TenantParam'
        - $ref: '#/components/parameters/EnvParam'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Config'
    post:
      tags:
        - Admin
      description: Set config for external components
      parameters:
        - $ref: '#/components/parameters/TenantParam'
        - $ref: '#/components/parameters/EnvParam'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Config'
      responses:
        '200':
          description: OK - config successfully updated.

  /activations:
    parameters:
      - $ref: '#/components/parameters/TenantParam'
      - $ref: '#/components/parameters/EnvParam'
    get:
      tags:
        - Activations
      description: List all policy activation events so far
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Activation'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BadRequestResponse'
    post:
      tags:
        - Activations
      description: Create a policy activation event. Do not include an id attribute when posting activation event data.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Activation'
      responses:
        '201':
          description: Created - new activation event created. The response provides the id of the new event.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceId'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BadRequestResponse'

  /activations/{event_id}:
    get:
      tags:
        - Activations
      description: Get a single policy activation event
      parameters:
        - $ref: '#/components/parameters/TenantParam'
        - $ref: '#/components/parameters/EnvParam'
        - $ref: '#/components/parameters/UuidParam'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Activation'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BadRequestResponse'
        '404':
          description: ERROR - No data set found for the ID provided
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
  
  /activations/planting_window:
    get:
      tags:
        - Activations
      description: Provide the planting window for the current season given crop and location parameters
      parameters:
        - $ref: '#/components/parameters/TenantParam'
        - $ref: '#/components/parameters/EnvParam'
        - $ref: '#/components/parameters/DateParam'
        - $ref: '#/components/parameters/Crop'
        - $ref: '#/components/parameters/Latitude'
        - $ref: '#/components/parameters/Longitude'

      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlantingWindow'

        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BadRequestResponse'

  /payments:
    parameters:
      - $ref: '#/components/parameters/TenantParam'
      - $ref: '#/components/parameters/EnvParam'
    get:
      tags:
        - Payments
      description: List all policy payment events so far
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Payment'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BadRequestResponse'
    post:
      tags:
        - Payments
      description: Create a payment event. Do not include an id attribute when posting payment event data.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Payment'
      responses:
        '201':
          description: Created - new payment event created. The response provides the id of the new event.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceId'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BadRequestResponse'
                
  /payments/{event_id}:
    get:
      tags:
        - Payments
      description: Get a single policy payment event
      parameters:
        - $ref: '#/components/parameters/TenantParam'
        - $ref: '#/components/parameters/EnvParam'
        - $ref: '#/components/parameters/UuidParam'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Payment'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BadRequestResponse'
        '404':
          description: ERROR - No data set found for the ID provided
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'

components:
  parameters:
    TargetDateParam:
      name: target_date
      in: query
      description: The target date for the loss calculation (rainfall data assumed to be available up to this date)
      required: true
      schema:
        type: string
        pattern: "^20[0-9]{6}$"
      example: "20210623"

    TenantParam:
      name: tenant
      in: query
      description: The tenant name
      required: true
      schema:
        type: string
        minLength: 1
        maxLength: 64
      example: 'acre'

    EnvParam:
      name: env
      in: query
      description: The environment name
      schema:
        type: string
        minLength: 1
        maxLength: 64
      example: 'test'

    DateParam:
      name: reference_date
      in: query
      description: The reference date for the request
      schema:
        type: string
        pattern: "^20[0-9]{6}$"
      example: "20210511"

    Crop:
      name: crop
      in: query
      description: Crop (also called value chain)
      schema:
        type: string
        enum:
        - Maize
        - Sorghum
        - Greengrams
        - Potato
        - SoyBeans
        - Wheat
      example: 'Maize'

    Latitude:
      name: latitude
      in: query
      description: Latitude of the location of the mobile device at the time of the call. Any number between -40 (40 degrees South) to 40 (40 degrees North)
      schema:
        type: number
        minimum: -40.0
        maximum: 40.0
        example: 0.125583

    Longitude:
      name: longitude
      in: query
      description: Longitude of the location of the mobile device at the time of the call. Any number between -20 (20 degrees West) to 55 (55 degrees East)
      schema:
          type: number
          minimum: -20.0
          maximum: 55.0
          example: 35.1592

    PhoneNo:
      name: phone_no
      in: query
      description: Phone number
      schema:
        type: string
        pattern: "^[0-9]{9,12}$"
        example: '254792125732'

    PolicyStatusParam:
      name: status
      in: query
      description: Policy status
      schema:
        type: string
        enum:
        - Active
        - Expired
      example: 'Active'

    UuidParam:
      name: event_id
      in: path
      description: A resource identifier
      required: true
      schema:
        type: string
        format: uuid
      example: '4ad6f91d-6378-4f52-b817-00cbc85ca39x'

    PixelLocationParam:
      name: location
      in: query
      description: Rainfall pixel location 
      required: true
      schema:
        type: string
        pattern: "^Pixel[0-9]{6}$"
      example: Pixel400568

    StartDateParam:
      name: date
      in: query
      description: Start date for rainfall data in YYYYMMDD format
      required: true
      schema:
        type: string
        pattern: "^20[0-9]{6}$"
      example: "20210511"

    DaysParam:
      name: days
      in: query
      description: Number of days for rainfall data
      required: true
      schema:
        type: number
        minimum: 1
        maximum: 200
      example: 14

  schemas:
    Arc2Cache:
      type: object
      properties:
        date_begin:
          description: Rainfall cache start date in YYYYMMDD format
          type: string
          pattern: "^20[0-9]{6}$"
          example: "20210511"
        date_end:
          type: string
          pattern: "^20[0-9]{6}$"
          example: "20210511"
        days:
          description: Rainfall cache size in number of days
          type: number
          example: 1
        cache:
          description: Rainfall cache content
          type: array
          items:
            type: string
            example: "20210511 /data/arc2/africa_arc.20210511.tif.zip"

    Arc2Rainfall:
      type: object
      properties:
        date_begin:
          description: Rainfall data start date in YYYYMMDD format
          type: string
          pattern: "^20[0-9]{6}$"
          example: "20210511"
        date_end:
          type: string
          pattern: "^20[0-9]{6}$"
          example: "20210511"
        days:
          description: Rainfall data for number of days
          type: number
          example: 1
        rainfall:
          description: Rainfall data
          type: array
          items:
            type: string
            example: "20210511 4.0"

    Config:
      type: object
      properties:
        mongo:
          $ref: '#/components/schemas/Component'
        s3:
          $ref: '#/components/schemas/Component'
        arc2:
          $ref: '#/components/schemas/Component'
        created_at:
          type: string
          description: Creation timestamp, omit this property for post requests
          format: date-time
          example: '28.03.2020  12:28:54'
      required:
        - mongo
        - s3
        - arc2

    Component:
      type: object
      properties:
        resource:
          type: string
          minLength: 3
          maxLength: 63
          nullable: false
          description: For MongoDB the DB name, for S3 the bucket name, use 'arc2' for Arc2.
          example: meteor
        access_id:
          type: string
          minLength: 3
          maxLength: 63
          nullable: true
          description: For S3 the access key, for MongoDB the username, skip for Arc2
        access_secret:
          type: string
          minLength: 3
          maxLength: 63
          nullable: true
          description: For S3 the secret key, for MongoDB the password, skip for Arc2
        host:
          type: string
          minLength: 6
          maxLength: 32
          nullable: false
          description: The name or IP address of the host machine (do not use localhost for container ops). 
          example: host.docker.internal
        port:
          type: number
          format: int32
          minimum: 1
          maximum: 99999
          nullable: false
          description: MongoDB default 27017, S3 default 9000, Arc2 default 5000
          example: "27017"
        timeout:
          type: number
          format: int32
          minimum: -1
          description: The timeout value [ms] for connection requests. 
          example: 1000

    Activation:
      properties:
        id:
          type: string
          format: uuid
          description: Unique id of the activation event, omit this attribute for posting new activation events
          example: 'ec7fd246-1b51-4f28-bc09-a7f5bae6e143'
        mobile_num:
          description: Phone number
          type: string
          pattern: "^[0-9]{9,12}$"
          example: '254792125732'
        call_time:
          type: string
          description: Timestamp of the call, this is assumed to be the planting date
          format: date-time
          example: '28.03.2020  12:28:54'
        latitude:
          description: Latitude at the moment of the call
          type: number
          minimum: -40.0
          maximum: 40.0
          example: 0.125583
        longitude:
          description: Longitude at the moment of the call
          type: number
          minimum: -20.0
          maximum: 55.0
          example: 35.1592
        county:
          type: string
          minLength: 3
          maxLength: 32
          description: County information (when latitude/longitude is missing)
          example: 'Meru'
        ward:
          type: string
          minLength: 3
          maxLength: 32
          description: Ward information (when latitude/longitude is missing)
          example: 'Mount Kenya Forest'
        country:
          type: string
          minLength: 2
          maxLength: 2
          description: Two letter country code (ISO 3166), eg. KE for Kenya
          example: 'KE'
        level_1:
          type: string
          minLength: 1
          maxLength: 32
          description: Level 1 location, eg county for Kenya
          example: 'Meru'
        level_2:
          type: string
          minLength: 1
          maxLength: 32
          description: Level 2 location, eg ward for Kenya
          example: 'Mount Kenya Forest'
        level_3:
          type: string
          minLength: 1
          maxLength: 32
          description: Level 3 location, not used for Kenya
        level_4:
          type: string
          minLength: 1
          maxLength: 32
          description: Level 4 location, not used for Kenya
        order_number:
          type: string
          minLength: 1
          maxLength: 16
          description: The reference to the policy
          example: 'A100097-0321'
        activation_code:
          type: string
          minLength: 1
          maxLength: 16
          description: The activation code for the policy
          example: '568947'
        value_chain:
          description: Crop (also called value chain)
          type: string
          enum:
          - Maize
          - Sorghum
          - Greengrams
          - Potato
          - SoyBeans
          - Wheat
          example: 'Maize'
        amount_premium:
          type: number
          description: Premium amount for this policy
          minimum: 0.0
          maximum: 1000000.0
          example: 500.0

    Payment:
      properties:
        id:
          type: string
          format: uuid
          description: Unique id of the payment event, omit this attribute for posting new payment events
          example: '8dd6f91d-6378-4f52-b817-00cbc85ca39e'
        mobile_num:
          description: Phone number
          type: string
          pattern: "^[0-9]{9,12}$"
          example: '254792125732'
        call_time:
          type: string
          description: Timestamp of the initiation time of the call
          format: date-time
          example: '28.03.2020  12:28:54'
        mpesa_code:
          type: string
          minLength: 9
          maxLength: 9
          description: MPesa transaction code
          example: 'PC82GDN7C'
        mpesa_name:
          type: string
          minLength: 3
          maxLength: 64
          description: First and last name of person associated with the call
          example: 'Jon Doe'
        order_number:
          type: string
          minLength: 3
          maxLength: 64
          description: The reference to the policy
          example: 'A100097-0321'
        amount_paid:
          type: number
          description: Amount paid for (partial) policy payment
          minimum: 0.0
          maximum: 1000000.0
          example: 50.0

    PlantingWindow:
      properties:
        crop:
          description: Crop (also called value chain)
          type: string
          enum:
          - Maize
          - Sorghum
          - Greengrams
          - Potato
          - SoyBeans
          - Wheat
          example: 'Maize'
        location:
          description: Planting window location 
          type: string
          pattern: "^Pixel[0-9]{6}$"
          example: Pixel400568
        begin_date:
          description: First date of planting for this crop and location
          type: string
          pattern: "^20[0-9]{6}$"
          example: "20210314"
        end_date:
          description: Last date of planting for this crop and location
          type: string
          pattern: "^20[0-9]{6}$"
          example: "20210328"

    Policy:
      properties:
        order_no:
          type: string
          minLength: 1
          maxLength: 16
          description: Reference to the order no for this policy
          example: 'A100097-0321'
        phone_no:
          description: Phone number
          type: string
          pattern: "^[0-9]{9,12}$"
          example: '254792125732'
        funding_end_date:
          description: Last date until which (additional) premium payments are accepted for this policy
          type: string
          pattern: "^20[0-9]{6}$"
          example: "20210414"
        status:
          type: string
          enum:
          - Active
          - Expired
          example: 'Active'

    PolicyInfo:
      allOf:
        - $ref: '#/components/schemas/Policy'
        - type: object
          properties:
            crop:
              description: Crop (also called value chain)
              type: string
              enum:
              - Maize
              - Sorghum
              - Greengrams
              - Potato
              - SoyBeans
              - Wheat
              example: 'Maize'
            location:
              description: Policy location 
              type: string
              pattern: "^Pixel[0-9]{6}$"
              example: Pixel400568
            sum_insured:
              description: The sum insured for this policy
              type: number
              minimum: 0.0
              maximum: 1000000.0
              example: 1000.0
            begin_date:
              description: The insurance coverage start date for this policy
              type: string
              pattern: "^20[0-9]{6}$"
              example: "20210331"
            end_date:
              description: The insurance coverage end date for this policy
              type: string
              pattern: "^20[0-9]{6}$"
              example: "20210821"

    Claim:
      properties:
        sequence_no:
          description: Sequence number of claim
          type: number
          minimum: 0
          maximum: 99
          example: 3
        name:
          description: Claim name
          type: string
          enum:
          - Deductible
          - GerminationDry
          - Vegetation
          - Flowering
          - ExcessRain
          example: 'Vegetation'
        amount:
          description: Claim amount (negative values for deductibles)
          type: number
          minimum: -100000.0
          maximum: 1000000.0
          example: 53.44
        status:
          description: Claim status
          type: string
          enum:
          - Pending
          - Confirmed
          example: 'Confirmed'

    ResourceId:
      properties:
        id:
          type: string
          format: uuid
          description: Unique resource id
          example: '8dd6f91d-6378-4f52-b817-00cbc85ca39e'

    BadRequestResponse:
      properties:
        message: 
          type: string
          description: Human readable error message
          example: When posting resources attribute 'id' must be omitted
        object_type:
          type: string
          description: Object type for this operation
          example: 'SomeObjectType'

    NotFoundResponse:
      type: object
      properties:
        message:
          type: string
          description: Error message description
          example: 'No object found for provided object ID'
        object_id:
          type: string
          description: Object ID queried
          example: 'some-object-id'
        object_type:
          type: string
          description: Object type queried
          example: 'SomeObjectType'
