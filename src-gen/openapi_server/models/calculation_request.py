# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
import re
from openapi_server import util

import re  # noqa: E501

class CalculationRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, job_id=None, season_data_id=None, target_date=None):  # noqa: E501
        """CalculationRequest - a model defined in OpenAPI

        :param job_id: The job_id of this CalculationRequest.  # noqa: E501
        :type job_id: str
        :param season_data_id: The season_data_id of this CalculationRequest.  # noqa: E501
        :type season_data_id: str
        :param target_date: The target_date of this CalculationRequest.  # noqa: E501
        :type target_date: str
        """
        self.openapi_types = {
            'job_id': str,
            'season_data_id': str,
            'target_date': str
        }

        self.attribute_map = {
            'job_id': 'job_id',
            'season_data_id': 'season_data_id',
            'target_date': 'target_date'
        }

        self._job_id = job_id
        self._season_data_id = season_data_id
        self._target_date = target_date

    @classmethod
    def from_dict(cls, dikt) -> 'CalculationRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The CalculationRequest of this CalculationRequest.  # noqa: E501
        :rtype: CalculationRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def job_id(self):
        """Gets the job_id of this CalculationRequest.


        :return: The job_id of this CalculationRequest.
        :rtype: str
        """
        return self._job_id

    @job_id.setter
    def job_id(self, job_id):
        """Sets the job_id of this CalculationRequest.


        :param job_id: The job_id of this CalculationRequest.
        :type job_id: str
        """
        if job_id is not None and len(job_id) > 36:
            raise ValueError("Invalid value for `job_id`, length must be less than or equal to `36`")  # noqa: E501
        if job_id is not None and len(job_id) < 2:
            raise ValueError("Invalid value for `job_id`, length must be greater than or equal to `2`")  # noqa: E501

        self._job_id = job_id

    @property
    def season_data_id(self):
        """Gets the season_data_id of this CalculationRequest.


        :return: The season_data_id of this CalculationRequest.
        :rtype: str
        """
        return self._season_data_id

    @season_data_id.setter
    def season_data_id(self, season_data_id):
        """Sets the season_data_id of this CalculationRequest.


        :param season_data_id: The season_data_id of this CalculationRequest.
        :type season_data_id: str
        """
        if season_data_id is not None and len(season_data_id) > 64:
            raise ValueError("Invalid value for `season_data_id`, length must be less than or equal to `64`")  # noqa: E501
        if season_data_id is not None and len(season_data_id) < 1:
            raise ValueError("Invalid value for `season_data_id`, length must be greater than or equal to `1`")  # noqa: E501

        self._season_data_id = season_data_id

    @property
    def target_date(self):
        """Gets the target_date of this CalculationRequest.


        :return: The target_date of this CalculationRequest.
        :rtype: str
        """
        return self._target_date

    @target_date.setter
    def target_date(self, target_date):
        """Sets the target_date of this CalculationRequest.


        :param target_date: The target_date of this CalculationRequest.
        :type target_date: str
        """
        if target_date is not None and not re.search(r'^20[0-9]{6}$', target_date):  # noqa: E501
            raise ValueError("Invalid value for `target_date`, must be a follow pattern or equal to `/^20[0-9]{6}$/`")  # noqa: E501

        self._target_date = target_date
