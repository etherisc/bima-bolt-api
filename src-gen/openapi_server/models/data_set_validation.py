# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
import re
from openapi_server import util

import re  # noqa: E501

class DataSetValidation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, season_id=None, folder_name=None, validation_outcome=None, validation_details=None):  # noqa: E501
        """DataSetValidation - a model defined in OpenAPI

        :param id: The id of this DataSetValidation.  # noqa: E501
        :type id: str
        :param season_id: The season_id of this DataSetValidation.  # noqa: E501
        :type season_id: str
        :param folder_name: The folder_name of this DataSetValidation.  # noqa: E501
        :type folder_name: str
        :param validation_outcome: The validation_outcome of this DataSetValidation.  # noqa: E501
        :type validation_outcome: str
        :param validation_details: The validation_details of this DataSetValidation.  # noqa: E501
        :type validation_details: List[str]
        """
        self.openapi_types = {
            'id': str,
            'season_id': str,
            'folder_name': str,
            'validation_outcome': str,
            'validation_details': List[str]
        }

        self.attribute_map = {
            'id': 'id',
            'season_id': 'season_id',
            'folder_name': 'folder_name',
            'validation_outcome': 'validation_outcome',
            'validation_details': 'validation_details'
        }

        self._id = id
        self._season_id = season_id
        self._folder_name = folder_name
        self._validation_outcome = validation_outcome
        self._validation_details = validation_details

    @classmethod
    def from_dict(cls, dikt) -> 'DataSetValidation':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The DataSetValidation of this DataSetValidation.  # noqa: E501
        :rtype: DataSetValidation
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this DataSetValidation.


        :return: The id of this DataSetValidation.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DataSetValidation.


        :param id: The id of this DataSetValidation.
        :type id: str
        """
        if id is not None and len(id) > 64:
            raise ValueError("Invalid value for `id`, length must be less than or equal to `64`")  # noqa: E501
        if id is not None and len(id) < 1:
            raise ValueError("Invalid value for `id`, length must be greater than or equal to `1`")  # noqa: E501

        self._id = id

    @property
    def season_id(self):
        """Gets the season_id of this DataSetValidation.


        :return: The season_id of this DataSetValidation.
        :rtype: str
        """
        return self._season_id

    @season_id.setter
    def season_id(self, season_id):
        """Sets the season_id of this DataSetValidation.


        :param season_id: The season_id of this DataSetValidation.
        :type season_id: str
        """
        if season_id is not None and not re.search(r'^[LS]R20[0-9]{2}$', season_id):  # noqa: E501
            raise ValueError("Invalid value for `season_id`, must be a follow pattern or equal to `/^[LS]R20[0-9]{2}$/`")  # noqa: E501

        self._season_id = season_id

    @property
    def folder_name(self):
        """Gets the folder_name of this DataSetValidation.


        :return: The folder_name of this DataSetValidation.
        :rtype: str
        """
        return self._folder_name

    @folder_name.setter
    def folder_name(self, folder_name):
        """Sets the folder_name of this DataSetValidation.


        :param folder_name: The folder_name of this DataSetValidation.
        :type folder_name: str
        """
        if folder_name is not None and len(folder_name) > 64:
            raise ValueError("Invalid value for `folder_name`, length must be less than or equal to `64`")  # noqa: E501
        if folder_name is not None and len(folder_name) < 1:
            raise ValueError("Invalid value for `folder_name`, length must be greater than or equal to `1`")  # noqa: E501

        self._folder_name = folder_name

    @property
    def validation_outcome(self):
        """Gets the validation_outcome of this DataSetValidation.


        :return: The validation_outcome of this DataSetValidation.
        :rtype: str
        """
        return self._validation_outcome

    @validation_outcome.setter
    def validation_outcome(self, validation_outcome):
        """Sets the validation_outcome of this DataSetValidation.


        :param validation_outcome: The validation_outcome of this DataSetValidation.
        :type validation_outcome: str
        """
        if validation_outcome is not None and len(validation_outcome) > 10:
            raise ValueError("Invalid value for `validation_outcome`, length must be less than or equal to `10`")  # noqa: E501
        if validation_outcome is not None and len(validation_outcome) < 2:
            raise ValueError("Invalid value for `validation_outcome`, length must be greater than or equal to `2`")  # noqa: E501

        self._validation_outcome = validation_outcome

    @property
    def validation_details(self):
        """Gets the validation_details of this DataSetValidation.

        validation detail record  # noqa: E501

        :return: The validation_details of this DataSetValidation.
        :rtype: List[str]
        """
        return self._validation_details

    @validation_details.setter
    def validation_details(self, validation_details):
        """Sets the validation_details of this DataSetValidation.

        validation detail record  # noqa: E501

        :param validation_details: The validation_details of this DataSetValidation.
        :type validation_details: List[str]
        """

        self._validation_details = validation_details
