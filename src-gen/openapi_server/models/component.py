# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class Component(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, resource=None, access_id=None, access_secret=None, host=None, port=None, timeout=None):  # noqa: E501
        """Component - a model defined in OpenAPI

        :param resource: The resource of this Component.  # noqa: E501
        :type resource: str
        :param access_id: The access_id of this Component.  # noqa: E501
        :type access_id: str
        :param access_secret: The access_secret of this Component.  # noqa: E501
        :type access_secret: str
        :param host: The host of this Component.  # noqa: E501
        :type host: str
        :param port: The port of this Component.  # noqa: E501
        :type port: float
        :param timeout: The timeout of this Component.  # noqa: E501
        :type timeout: float
        """
        self.openapi_types = {
            'resource': str,
            'access_id': str,
            'access_secret': str,
            'host': str,
            'port': float,
            'timeout': float
        }

        self.attribute_map = {
            'resource': 'resource',
            'access_id': 'access_id',
            'access_secret': 'access_secret',
            'host': 'host',
            'port': 'port',
            'timeout': 'timeout'
        }

        self._resource = resource
        self._access_id = access_id
        self._access_secret = access_secret
        self._host = host
        self._port = port
        self._timeout = timeout

    @classmethod
    def from_dict(cls, dikt) -> 'Component':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Component of this Component.  # noqa: E501
        :rtype: Component
        """
        return util.deserialize_model(dikt, cls)

    @property
    def resource(self):
        """Gets the resource of this Component.

        For MongoDB the DB name, for S3 the bucket name, use 'arc2' for Arc2.  # noqa: E501

        :return: The resource of this Component.
        :rtype: str
        """
        return self._resource

    @resource.setter
    def resource(self, resource):
        """Sets the resource of this Component.

        For MongoDB the DB name, for S3 the bucket name, use 'arc2' for Arc2.  # noqa: E501

        :param resource: The resource of this Component.
        :type resource: str
        """
        if resource is not None and len(resource) > 63:
            raise ValueError("Invalid value for `resource`, length must be less than or equal to `63`")  # noqa: E501
        if resource is not None and len(resource) < 3:
            raise ValueError("Invalid value for `resource`, length must be greater than or equal to `3`")  # noqa: E501

        self._resource = resource

    @property
    def access_id(self):
        """Gets the access_id of this Component.

        For S3 the access key, for MongoDB the username, skip for Arc2  # noqa: E501

        :return: The access_id of this Component.
        :rtype: str
        """
        return self._access_id

    @access_id.setter
    def access_id(self, access_id):
        """Sets the access_id of this Component.

        For S3 the access key, for MongoDB the username, skip for Arc2  # noqa: E501

        :param access_id: The access_id of this Component.
        :type access_id: str
        """
        if access_id is not None and len(access_id) > 63:
            raise ValueError("Invalid value for `access_id`, length must be less than or equal to `63`")  # noqa: E501
        if access_id is not None and len(access_id) < 3:
            raise ValueError("Invalid value for `access_id`, length must be greater than or equal to `3`")  # noqa: E501

        self._access_id = access_id

    @property
    def access_secret(self):
        """Gets the access_secret of this Component.

        For S3 the secret key, for MongoDB the password, skip for Arc2  # noqa: E501

        :return: The access_secret of this Component.
        :rtype: str
        """
        return self._access_secret

    @access_secret.setter
    def access_secret(self, access_secret):
        """Sets the access_secret of this Component.

        For S3 the secret key, for MongoDB the password, skip for Arc2  # noqa: E501

        :param access_secret: The access_secret of this Component.
        :type access_secret: str
        """
        if access_secret is not None and len(access_secret) > 63:
            raise ValueError("Invalid value for `access_secret`, length must be less than or equal to `63`")  # noqa: E501
        if access_secret is not None and len(access_secret) < 3:
            raise ValueError("Invalid value for `access_secret`, length must be greater than or equal to `3`")  # noqa: E501

        self._access_secret = access_secret

    @property
    def host(self):
        """Gets the host of this Component.

        The name or IP address of the host machine (do not use localhost for container ops).  # noqa: E501

        :return: The host of this Component.
        :rtype: str
        """
        return self._host

    @host.setter
    def host(self, host):
        """Sets the host of this Component.

        The name or IP address of the host machine (do not use localhost for container ops).  # noqa: E501

        :param host: The host of this Component.
        :type host: str
        """
        if host is not None and len(host) > 32:
            raise ValueError("Invalid value for `host`, length must be less than or equal to `32`")  # noqa: E501
        if host is not None and len(host) < 6:
            raise ValueError("Invalid value for `host`, length must be greater than or equal to `6`")  # noqa: E501

        self._host = host

    @property
    def port(self):
        """Gets the port of this Component.

        MongoDB default 27017, S3 default 9000, Arc2 default 5000  # noqa: E501

        :return: The port of this Component.
        :rtype: float
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this Component.

        MongoDB default 27017, S3 default 9000, Arc2 default 5000  # noqa: E501

        :param port: The port of this Component.
        :type port: float
        """
        if port is not None and port > 99999:  # noqa: E501
            raise ValueError("Invalid value for `port`, must be a value less than or equal to `99999`")  # noqa: E501
        if port is not None and port < 1:  # noqa: E501
            raise ValueError("Invalid value for `port`, must be a value greater than or equal to `1`")  # noqa: E501

        self._port = port

    @property
    def timeout(self):
        """Gets the timeout of this Component.

        The timeout value [ms] for connection requests.  # noqa: E501

        :return: The timeout of this Component.
        :rtype: float
        """
        return self._timeout

    @timeout.setter
    def timeout(self, timeout):
        """Sets the timeout of this Component.

        The timeout value [ms] for connection requests.  # noqa: E501

        :param timeout: The timeout of this Component.
        :type timeout: float
        """
        if timeout is not None and timeout < -1:  # noqa: E501
            raise ValueError("Invalid value for `timeout`, must be a value greater than or equal to `-1`")  # noqa: E501

        self._timeout = timeout
