# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
import re
from openapi_server import util

import re  # noqa: E501

class PlantingWindow(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, crop=None, location=None, begin_date=None, end_date=None):  # noqa: E501
        """PlantingWindow - a model defined in OpenAPI

        :param crop: The crop of this PlantingWindow.  # noqa: E501
        :type crop: str
        :param location: The location of this PlantingWindow.  # noqa: E501
        :type location: str
        :param begin_date: The begin_date of this PlantingWindow.  # noqa: E501
        :type begin_date: str
        :param end_date: The end_date of this PlantingWindow.  # noqa: E501
        :type end_date: str
        """
        self.openapi_types = {
            'crop': str,
            'location': str,
            'begin_date': str,
            'end_date': str
        }

        self.attribute_map = {
            'crop': 'crop',
            'location': 'location',
            'begin_date': 'begin_date',
            'end_date': 'end_date'
        }

        self._crop = crop
        self._location = location
        self._begin_date = begin_date
        self._end_date = end_date

    @classmethod
    def from_dict(cls, dikt) -> 'PlantingWindow':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The PlantingWindow of this PlantingWindow.  # noqa: E501
        :rtype: PlantingWindow
        """
        return util.deserialize_model(dikt, cls)

    @property
    def crop(self):
        """Gets the crop of this PlantingWindow.

        Crop (also called value chain)  # noqa: E501

        :return: The crop of this PlantingWindow.
        :rtype: str
        """
        return self._crop

    @crop.setter
    def crop(self, crop):
        """Sets the crop of this PlantingWindow.

        Crop (also called value chain)  # noqa: E501

        :param crop: The crop of this PlantingWindow.
        :type crop: str
        """
        allowed_values = ["Maize", "Sorghum", "Greengrams", "Potato", "SoyBeans", "Wheat"]  # noqa: E501
        if crop not in allowed_values:
            raise ValueError(
                "Invalid value for `crop` ({0}), must be one of {1}"
                .format(crop, allowed_values)
            )

        self._crop = crop

    @property
    def location(self):
        """Gets the location of this PlantingWindow.

        Planting window location  # noqa: E501

        :return: The location of this PlantingWindow.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this PlantingWindow.

        Planting window location  # noqa: E501

        :param location: The location of this PlantingWindow.
        :type location: str
        """
        if location is not None and not re.search(r'^Pixel[0-9]{6}$', location):  # noqa: E501
            raise ValueError("Invalid value for `location`, must be a follow pattern or equal to `/^Pixel[0-9]{6}$/`")  # noqa: E501

        self._location = location

    @property
    def begin_date(self):
        """Gets the begin_date of this PlantingWindow.

        First date of planting for this crop and location  # noqa: E501

        :return: The begin_date of this PlantingWindow.
        :rtype: str
        """
        return self._begin_date

    @begin_date.setter
    def begin_date(self, begin_date):
        """Sets the begin_date of this PlantingWindow.

        First date of planting for this crop and location  # noqa: E501

        :param begin_date: The begin_date of this PlantingWindow.
        :type begin_date: str
        """
        if begin_date is not None and not re.search(r'^20[0-9]{6}$', begin_date):  # noqa: E501
            raise ValueError("Invalid value for `begin_date`, must be a follow pattern or equal to `/^20[0-9]{6}$/`")  # noqa: E501

        self._begin_date = begin_date

    @property
    def end_date(self):
        """Gets the end_date of this PlantingWindow.

        Last date of planting for this crop and location  # noqa: E501

        :return: The end_date of this PlantingWindow.
        :rtype: str
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this PlantingWindow.

        Last date of planting for this crop and location  # noqa: E501

        :param end_date: The end_date of this PlantingWindow.
        :type end_date: str
        """
        if end_date is not None and not re.search(r'^20[0-9]{6}$', end_date):  # noqa: E501
            raise ValueError("Invalid value for `end_date`, must be a follow pattern or equal to `/^20[0-9]{6}$/`")  # noqa: E501

        self._end_date = end_date
