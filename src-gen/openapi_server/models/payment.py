# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
import re
from openapi_server import util

import re  # noqa: E501

class Payment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, mobile_num=None, call_time=None, mpesa_code=None, mpesa_name=None, order_number=None, amount_paid=None):  # noqa: E501
        """Payment - a model defined in OpenAPI

        :param id: The id of this Payment.  # noqa: E501
        :type id: str
        :param mobile_num: The mobile_num of this Payment.  # noqa: E501
        :type mobile_num: str
        :param call_time: The call_time of this Payment.  # noqa: E501
        :type call_time: datetime
        :param mpesa_code: The mpesa_code of this Payment.  # noqa: E501
        :type mpesa_code: str
        :param mpesa_name: The mpesa_name of this Payment.  # noqa: E501
        :type mpesa_name: str
        :param order_number: The order_number of this Payment.  # noqa: E501
        :type order_number: str
        :param amount_paid: The amount_paid of this Payment.  # noqa: E501
        :type amount_paid: float
        """
        self.openapi_types = {
            'id': str,
            'mobile_num': str,
            'call_time': datetime,
            'mpesa_code': str,
            'mpesa_name': str,
            'order_number': str,
            'amount_paid': float
        }

        self.attribute_map = {
            'id': 'id',
            'mobile_num': 'mobile_num',
            'call_time': 'call_time',
            'mpesa_code': 'mpesa_code',
            'mpesa_name': 'mpesa_name',
            'order_number': 'order_number',
            'amount_paid': 'amount_paid'
        }

        self._id = id
        self._mobile_num = mobile_num
        self._call_time = call_time
        self._mpesa_code = mpesa_code
        self._mpesa_name = mpesa_name
        self._order_number = order_number
        self._amount_paid = amount_paid

    @classmethod
    def from_dict(cls, dikt) -> 'Payment':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Payment of this Payment.  # noqa: E501
        :rtype: Payment
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Payment.

        Unique id of the payment event, omit this attribute for posting new payment events  # noqa: E501

        :return: The id of this Payment.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Payment.

        Unique id of the payment event, omit this attribute for posting new payment events  # noqa: E501

        :param id: The id of this Payment.
        :type id: str
        """

        self._id = id

    @property
    def mobile_num(self):
        """Gets the mobile_num of this Payment.

        Phone number  # noqa: E501

        :return: The mobile_num of this Payment.
        :rtype: str
        """
        return self._mobile_num

    @mobile_num.setter
    def mobile_num(self, mobile_num):
        """Sets the mobile_num of this Payment.

        Phone number  # noqa: E501

        :param mobile_num: The mobile_num of this Payment.
        :type mobile_num: str
        """
        if mobile_num is not None and not re.search(r'^[0-9]{9,12}$', mobile_num):  # noqa: E501
            raise ValueError("Invalid value for `mobile_num`, must be a follow pattern or equal to `/^[0-9]{9,12}$/`")  # noqa: E501

        self._mobile_num = mobile_num

    @property
    def call_time(self):
        """Gets the call_time of this Payment.

        Timestamp of the initiation time of the call  # noqa: E501

        :return: The call_time of this Payment.
        :rtype: datetime
        """
        return self._call_time

    @call_time.setter
    def call_time(self, call_time):
        """Sets the call_time of this Payment.

        Timestamp of the initiation time of the call  # noqa: E501

        :param call_time: The call_time of this Payment.
        :type call_time: datetime
        """

        self._call_time = call_time

    @property
    def mpesa_code(self):
        """Gets the mpesa_code of this Payment.

        MPesa transaction code  # noqa: E501

        :return: The mpesa_code of this Payment.
        :rtype: str
        """
        return self._mpesa_code

    @mpesa_code.setter
    def mpesa_code(self, mpesa_code):
        """Sets the mpesa_code of this Payment.

        MPesa transaction code  # noqa: E501

        :param mpesa_code: The mpesa_code of this Payment.
        :type mpesa_code: str
        """
        if mpesa_code is not None and len(mpesa_code) > 9:
            raise ValueError("Invalid value for `mpesa_code`, length must be less than or equal to `9`")  # noqa: E501
        if mpesa_code is not None and len(mpesa_code) < 9:
            raise ValueError("Invalid value for `mpesa_code`, length must be greater than or equal to `9`")  # noqa: E501

        self._mpesa_code = mpesa_code

    @property
    def mpesa_name(self):
        """Gets the mpesa_name of this Payment.

        First and last name of person associated with the call  # noqa: E501

        :return: The mpesa_name of this Payment.
        :rtype: str
        """
        return self._mpesa_name

    @mpesa_name.setter
    def mpesa_name(self, mpesa_name):
        """Sets the mpesa_name of this Payment.

        First and last name of person associated with the call  # noqa: E501

        :param mpesa_name: The mpesa_name of this Payment.
        :type mpesa_name: str
        """
        if mpesa_name is not None and len(mpesa_name) > 64:
            raise ValueError("Invalid value for `mpesa_name`, length must be less than or equal to `64`")  # noqa: E501
        if mpesa_name is not None and len(mpesa_name) < 3:
            raise ValueError("Invalid value for `mpesa_name`, length must be greater than or equal to `3`")  # noqa: E501

        self._mpesa_name = mpesa_name

    @property
    def order_number(self):
        """Gets the order_number of this Payment.

        The reference to the policy  # noqa: E501

        :return: The order_number of this Payment.
        :rtype: str
        """
        return self._order_number

    @order_number.setter
    def order_number(self, order_number):
        """Sets the order_number of this Payment.

        The reference to the policy  # noqa: E501

        :param order_number: The order_number of this Payment.
        :type order_number: str
        """
        if order_number is not None and len(order_number) > 64:
            raise ValueError("Invalid value for `order_number`, length must be less than or equal to `64`")  # noqa: E501
        if order_number is not None and len(order_number) < 3:
            raise ValueError("Invalid value for `order_number`, length must be greater than or equal to `3`")  # noqa: E501

        self._order_number = order_number

    @property
    def amount_paid(self):
        """Gets the amount_paid of this Payment.

        Amount paid for (partial) policy payment  # noqa: E501

        :return: The amount_paid of this Payment.
        :rtype: float
        """
        return self._amount_paid

    @amount_paid.setter
    def amount_paid(self, amount_paid):
        """Sets the amount_paid of this Payment.

        Amount paid for (partial) policy payment  # noqa: E501

        :param amount_paid: The amount_paid of this Payment.
        :type amount_paid: float
        """
        if amount_paid is not None and amount_paid > 1000000.0:  # noqa: E501
            raise ValueError("Invalid value for `amount_paid`, must be a value less than or equal to `1000000.0`")  # noqa: E501
        if amount_paid is not None and amount_paid < 0.0:  # noqa: E501
            raise ValueError("Invalid value for `amount_paid`, must be a value greater than or equal to `0.0`")  # noqa: E501

        self._amount_paid = amount_paid
