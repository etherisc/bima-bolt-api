# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
import re
from openapi_server import util

import re  # noqa: E501

class Activation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, mobile_num=None, call_time=None, latitude=None, longitude=None, county=None, ward=None, country=None, level_1=None, level_2=None, level_3=None, level_4=None, order_number=None, activation_code=None, value_chain=None, amount_premium=None):  # noqa: E501
        """Activation - a model defined in OpenAPI

        :param id: The id of this Activation.  # noqa: E501
        :type id: str
        :param mobile_num: The mobile_num of this Activation.  # noqa: E501
        :type mobile_num: str
        :param call_time: The call_time of this Activation.  # noqa: E501
        :type call_time: datetime
        :param latitude: The latitude of this Activation.  # noqa: E501
        :type latitude: float
        :param longitude: The longitude of this Activation.  # noqa: E501
        :type longitude: float
        :param county: The county of this Activation.  # noqa: E501
        :type county: str
        :param ward: The ward of this Activation.  # noqa: E501
        :type ward: str
        :param country: The country of this Activation.  # noqa: E501
        :type country: str
        :param level_1: The level_1 of this Activation.  # noqa: E501
        :type level_1: str
        :param level_2: The level_2 of this Activation.  # noqa: E501
        :type level_2: str
        :param level_3: The level_3 of this Activation.  # noqa: E501
        :type level_3: str
        :param level_4: The level_4 of this Activation.  # noqa: E501
        :type level_4: str
        :param order_number: The order_number of this Activation.  # noqa: E501
        :type order_number: str
        :param activation_code: The activation_code of this Activation.  # noqa: E501
        :type activation_code: str
        :param value_chain: The value_chain of this Activation.  # noqa: E501
        :type value_chain: str
        :param amount_premium: The amount_premium of this Activation.  # noqa: E501
        :type amount_premium: float
        """
        self.openapi_types = {
            'id': str,
            'mobile_num': str,
            'call_time': datetime,
            'latitude': float,
            'longitude': float,
            'county': str,
            'ward': str,
            'country': str,
            'level_1': str,
            'level_2': str,
            'level_3': str,
            'level_4': str,
            'order_number': str,
            'activation_code': str,
            'value_chain': str,
            'amount_premium': float
        }

        self.attribute_map = {
            'id': 'id',
            'mobile_num': 'mobile_num',
            'call_time': 'call_time',
            'latitude': 'latitude',
            'longitude': 'longitude',
            'county': 'county',
            'ward': 'ward',
            'country': 'country',
            'level_1': 'level_1',
            'level_2': 'level_2',
            'level_3': 'level_3',
            'level_4': 'level_4',
            'order_number': 'order_number',
            'activation_code': 'activation_code',
            'value_chain': 'value_chain',
            'amount_premium': 'amount_premium'
        }

        self._id = id
        self._mobile_num = mobile_num
        self._call_time = call_time
        self._latitude = latitude
        self._longitude = longitude
        self._county = county
        self._ward = ward
        self._country = country
        self._level_1 = level_1
        self._level_2 = level_2
        self._level_3 = level_3
        self._level_4 = level_4
        self._order_number = order_number
        self._activation_code = activation_code
        self._value_chain = value_chain
        self._amount_premium = amount_premium

    @classmethod
    def from_dict(cls, dikt) -> 'Activation':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Activation of this Activation.  # noqa: E501
        :rtype: Activation
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Activation.

        Unique id of the activation event, omit this attribute for posting new activation events  # noqa: E501

        :return: The id of this Activation.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Activation.

        Unique id of the activation event, omit this attribute for posting new activation events  # noqa: E501

        :param id: The id of this Activation.
        :type id: str
        """

        self._id = id

    @property
    def mobile_num(self):
        """Gets the mobile_num of this Activation.

        Phone number  # noqa: E501

        :return: The mobile_num of this Activation.
        :rtype: str
        """
        return self._mobile_num

    @mobile_num.setter
    def mobile_num(self, mobile_num):
        """Sets the mobile_num of this Activation.

        Phone number  # noqa: E501

        :param mobile_num: The mobile_num of this Activation.
        :type mobile_num: str
        """
        if mobile_num is not None and not re.search(r'^[0-9]{9,12}$', mobile_num):  # noqa: E501
            raise ValueError("Invalid value for `mobile_num`, must be a follow pattern or equal to `/^[0-9]{9,12}$/`")  # noqa: E501

        self._mobile_num = mobile_num

    @property
    def call_time(self):
        """Gets the call_time of this Activation.

        Timestamp of the call, this is assumed to be the planting date  # noqa: E501

        :return: The call_time of this Activation.
        :rtype: datetime
        """
        return self._call_time

    @call_time.setter
    def call_time(self, call_time):
        """Sets the call_time of this Activation.

        Timestamp of the call, this is assumed to be the planting date  # noqa: E501

        :param call_time: The call_time of this Activation.
        :type call_time: datetime
        """

        self._call_time = call_time

    @property
    def latitude(self):
        """Gets the latitude of this Activation.

        Latitude at the moment of the call  # noqa: E501

        :return: The latitude of this Activation.
        :rtype: float
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude):
        """Sets the latitude of this Activation.

        Latitude at the moment of the call  # noqa: E501

        :param latitude: The latitude of this Activation.
        :type latitude: float
        """
        if latitude is not None and latitude > 40.0:  # noqa: E501
            raise ValueError("Invalid value for `latitude`, must be a value less than or equal to `40.0`")  # noqa: E501
        if latitude is not None and latitude < -40.0:  # noqa: E501
            raise ValueError("Invalid value for `latitude`, must be a value greater than or equal to `-40.0`")  # noqa: E501

        self._latitude = latitude

    @property
    def longitude(self):
        """Gets the longitude of this Activation.

        Longitude at the moment of the call  # noqa: E501

        :return: The longitude of this Activation.
        :rtype: float
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude):
        """Sets the longitude of this Activation.

        Longitude at the moment of the call  # noqa: E501

        :param longitude: The longitude of this Activation.
        :type longitude: float
        """
        if longitude is not None and longitude > 55.0:  # noqa: E501
            raise ValueError("Invalid value for `longitude`, must be a value less than or equal to `55.0`")  # noqa: E501
        if longitude is not None and longitude < -20.0:  # noqa: E501
            raise ValueError("Invalid value for `longitude`, must be a value greater than or equal to `-20.0`")  # noqa: E501

        self._longitude = longitude

    @property
    def county(self):
        """Gets the county of this Activation.

        County information (when latitude/longitude is missing)  # noqa: E501

        :return: The county of this Activation.
        :rtype: str
        """
        return self._county

    @county.setter
    def county(self, county):
        """Sets the county of this Activation.

        County information (when latitude/longitude is missing)  # noqa: E501

        :param county: The county of this Activation.
        :type county: str
        """
        if county is not None and len(county) > 32:
            raise ValueError("Invalid value for `county`, length must be less than or equal to `32`")  # noqa: E501
        if county is not None and len(county) < 3:
            raise ValueError("Invalid value for `county`, length must be greater than or equal to `3`")  # noqa: E501

        self._county = county

    @property
    def ward(self):
        """Gets the ward of this Activation.

        Ward information (when latitude/longitude is missing)  # noqa: E501

        :return: The ward of this Activation.
        :rtype: str
        """
        return self._ward

    @ward.setter
    def ward(self, ward):
        """Sets the ward of this Activation.

        Ward information (when latitude/longitude is missing)  # noqa: E501

        :param ward: The ward of this Activation.
        :type ward: str
        """
        if ward is not None and len(ward) > 32:
            raise ValueError("Invalid value for `ward`, length must be less than or equal to `32`")  # noqa: E501
        if ward is not None and len(ward) < 3:
            raise ValueError("Invalid value for `ward`, length must be greater than or equal to `3`")  # noqa: E501

        self._ward = ward

    @property
    def country(self):
        """Gets the country of this Activation.

        Two letter country code (ISO 3166), eg. KE for Kenya  # noqa: E501

        :return: The country of this Activation.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this Activation.

        Two letter country code (ISO 3166), eg. KE for Kenya  # noqa: E501

        :param country: The country of this Activation.
        :type country: str
        """
        if country is not None and len(country) > 2:
            raise ValueError("Invalid value for `country`, length must be less than or equal to `2`")  # noqa: E501
        if country is not None and len(country) < 2:
            raise ValueError("Invalid value for `country`, length must be greater than or equal to `2`")  # noqa: E501

        self._country = country

    @property
    def level_1(self):
        """Gets the level_1 of this Activation.

        Level 1 location, eg county for Kenya  # noqa: E501

        :return: The level_1 of this Activation.
        :rtype: str
        """
        return self._level_1

    @level_1.setter
    def level_1(self, level_1):
        """Sets the level_1 of this Activation.

        Level 1 location, eg county for Kenya  # noqa: E501

        :param level_1: The level_1 of this Activation.
        :type level_1: str
        """
        if level_1 is not None and len(level_1) > 32:
            raise ValueError("Invalid value for `level_1`, length must be less than or equal to `32`")  # noqa: E501
        if level_1 is not None and len(level_1) < 1:
            raise ValueError("Invalid value for `level_1`, length must be greater than or equal to `1`")  # noqa: E501

        self._level_1 = level_1

    @property
    def level_2(self):
        """Gets the level_2 of this Activation.

        Level 2 location, eg ward for Kenya  # noqa: E501

        :return: The level_2 of this Activation.
        :rtype: str
        """
        return self._level_2

    @level_2.setter
    def level_2(self, level_2):
        """Sets the level_2 of this Activation.

        Level 2 location, eg ward for Kenya  # noqa: E501

        :param level_2: The level_2 of this Activation.
        :type level_2: str
        """
        if level_2 is not None and len(level_2) > 32:
            raise ValueError("Invalid value for `level_2`, length must be less than or equal to `32`")  # noqa: E501
        if level_2 is not None and len(level_2) < 1:
            raise ValueError("Invalid value for `level_2`, length must be greater than or equal to `1`")  # noqa: E501

        self._level_2 = level_2

    @property
    def level_3(self):
        """Gets the level_3 of this Activation.

        Level 3 location, not used for Kenya  # noqa: E501

        :return: The level_3 of this Activation.
        :rtype: str
        """
        return self._level_3

    @level_3.setter
    def level_3(self, level_3):
        """Sets the level_3 of this Activation.

        Level 3 location, not used for Kenya  # noqa: E501

        :param level_3: The level_3 of this Activation.
        :type level_3: str
        """
        if level_3 is not None and len(level_3) > 32:
            raise ValueError("Invalid value for `level_3`, length must be less than or equal to `32`")  # noqa: E501
        if level_3 is not None and len(level_3) < 1:
            raise ValueError("Invalid value for `level_3`, length must be greater than or equal to `1`")  # noqa: E501

        self._level_3 = level_3

    @property
    def level_4(self):
        """Gets the level_4 of this Activation.

        Level 4 location, not used for Kenya  # noqa: E501

        :return: The level_4 of this Activation.
        :rtype: str
        """
        return self._level_4

    @level_4.setter
    def level_4(self, level_4):
        """Sets the level_4 of this Activation.

        Level 4 location, not used for Kenya  # noqa: E501

        :param level_4: The level_4 of this Activation.
        :type level_4: str
        """
        if level_4 is not None and len(level_4) > 32:
            raise ValueError("Invalid value for `level_4`, length must be less than or equal to `32`")  # noqa: E501
        if level_4 is not None and len(level_4) < 1:
            raise ValueError("Invalid value for `level_4`, length must be greater than or equal to `1`")  # noqa: E501

        self._level_4 = level_4

    @property
    def order_number(self):
        """Gets the order_number of this Activation.

        The reference to the policy  # noqa: E501

        :return: The order_number of this Activation.
        :rtype: str
        """
        return self._order_number

    @order_number.setter
    def order_number(self, order_number):
        """Sets the order_number of this Activation.

        The reference to the policy  # noqa: E501

        :param order_number: The order_number of this Activation.
        :type order_number: str
        """
        if order_number is not None and len(order_number) > 16:
            raise ValueError("Invalid value for `order_number`, length must be less than or equal to `16`")  # noqa: E501
        if order_number is not None and len(order_number) < 1:
            raise ValueError("Invalid value for `order_number`, length must be greater than or equal to `1`")  # noqa: E501

        self._order_number = order_number

    @property
    def activation_code(self):
        """Gets the activation_code of this Activation.

        The activation code for the policy  # noqa: E501

        :return: The activation_code of this Activation.
        :rtype: str
        """
        return self._activation_code

    @activation_code.setter
    def activation_code(self, activation_code):
        """Sets the activation_code of this Activation.

        The activation code for the policy  # noqa: E501

        :param activation_code: The activation_code of this Activation.
        :type activation_code: str
        """
        if activation_code is not None and len(activation_code) > 16:
            raise ValueError("Invalid value for `activation_code`, length must be less than or equal to `16`")  # noqa: E501
        if activation_code is not None and len(activation_code) < 1:
            raise ValueError("Invalid value for `activation_code`, length must be greater than or equal to `1`")  # noqa: E501

        self._activation_code = activation_code

    @property
    def value_chain(self):
        """Gets the value_chain of this Activation.

        Crop (also called value chain)  # noqa: E501

        :return: The value_chain of this Activation.
        :rtype: str
        """
        return self._value_chain

    @value_chain.setter
    def value_chain(self, value_chain):
        """Sets the value_chain of this Activation.

        Crop (also called value chain)  # noqa: E501

        :param value_chain: The value_chain of this Activation.
        :type value_chain: str
        """
        allowed_values = ["Maize", "Sorghum", "Greengrams", "Potato", "SoyBeans", "Wheat"]  # noqa: E501
        if value_chain not in allowed_values:
            raise ValueError(
                "Invalid value for `value_chain` ({0}), must be one of {1}"
                .format(value_chain, allowed_values)
            )

        self._value_chain = value_chain

    @property
    def amount_premium(self):
        """Gets the amount_premium of this Activation.

        Premium amount for this policy  # noqa: E501

        :return: The amount_premium of this Activation.
        :rtype: float
        """
        return self._amount_premium

    @amount_premium.setter
    def amount_premium(self, amount_premium):
        """Sets the amount_premium of this Activation.

        Premium amount for this policy  # noqa: E501

        :param amount_premium: The amount_premium of this Activation.
        :type amount_premium: float
        """
        if amount_premium is not None and amount_premium > 1000000.0:  # noqa: E501
            raise ValueError("Invalid value for `amount_premium`, must be a value less than or equal to `1000000.0`")  # noqa: E501
        if amount_premium is not None and amount_premium < 0.0:  # noqa: E501
            raise ValueError("Invalid value for `amount_premium`, must be a value greater than or equal to `0.0`")  # noqa: E501

        self._amount_premium = amount_premium
