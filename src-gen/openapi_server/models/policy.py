# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
import re
from openapi_server import util

import re  # noqa: E501

class Policy(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, order_no=None, phone_no=None, funding_end_date=None, status=None):  # noqa: E501
        """Policy - a model defined in OpenAPI

        :param order_no: The order_no of this Policy.  # noqa: E501
        :type order_no: str
        :param phone_no: The phone_no of this Policy.  # noqa: E501
        :type phone_no: str
        :param funding_end_date: The funding_end_date of this Policy.  # noqa: E501
        :type funding_end_date: str
        :param status: The status of this Policy.  # noqa: E501
        :type status: str
        """
        self.openapi_types = {
            'order_no': str,
            'phone_no': str,
            'funding_end_date': str,
            'status': str
        }

        self.attribute_map = {
            'order_no': 'order_no',
            'phone_no': 'phone_no',
            'funding_end_date': 'funding_end_date',
            'status': 'status'
        }

        self._order_no = order_no
        self._phone_no = phone_no
        self._funding_end_date = funding_end_date
        self._status = status

    @classmethod
    def from_dict(cls, dikt) -> 'Policy':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Policy of this Policy.  # noqa: E501
        :rtype: Policy
        """
        return util.deserialize_model(dikt, cls)

    @property
    def order_no(self):
        """Gets the order_no of this Policy.

        Reference to the order no for this policy  # noqa: E501

        :return: The order_no of this Policy.
        :rtype: str
        """
        return self._order_no

    @order_no.setter
    def order_no(self, order_no):
        """Sets the order_no of this Policy.

        Reference to the order no for this policy  # noqa: E501

        :param order_no: The order_no of this Policy.
        :type order_no: str
        """
        if order_no is not None and len(order_no) > 16:
            raise ValueError("Invalid value for `order_no`, length must be less than or equal to `16`")  # noqa: E501
        if order_no is not None and len(order_no) < 1:
            raise ValueError("Invalid value for `order_no`, length must be greater than or equal to `1`")  # noqa: E501

        self._order_no = order_no

    @property
    def phone_no(self):
        """Gets the phone_no of this Policy.

        Phone number  # noqa: E501

        :return: The phone_no of this Policy.
        :rtype: str
        """
        return self._phone_no

    @phone_no.setter
    def phone_no(self, phone_no):
        """Sets the phone_no of this Policy.

        Phone number  # noqa: E501

        :param phone_no: The phone_no of this Policy.
        :type phone_no: str
        """
        if phone_no is not None and not re.search(r'^[0-9]{9,12}$', phone_no):  # noqa: E501
            raise ValueError("Invalid value for `phone_no`, must be a follow pattern or equal to `/^[0-9]{9,12}$/`")  # noqa: E501

        self._phone_no = phone_no

    @property
    def funding_end_date(self):
        """Gets the funding_end_date of this Policy.

        Last date until which (additional) premium payments are accepted for this policy  # noqa: E501

        :return: The funding_end_date of this Policy.
        :rtype: str
        """
        return self._funding_end_date

    @funding_end_date.setter
    def funding_end_date(self, funding_end_date):
        """Sets the funding_end_date of this Policy.

        Last date until which (additional) premium payments are accepted for this policy  # noqa: E501

        :param funding_end_date: The funding_end_date of this Policy.
        :type funding_end_date: str
        """
        if funding_end_date is not None and not re.search(r'^20[0-9]{6}$', funding_end_date):  # noqa: E501
            raise ValueError("Invalid value for `funding_end_date`, must be a follow pattern or equal to `/^20[0-9]{6}$/`")  # noqa: E501

        self._funding_end_date = funding_end_date

    @property
    def status(self):
        """Gets the status of this Policy.


        :return: The status of this Policy.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Policy.


        :param status: The status of this Policy.
        :type status: str
        """
        allowed_values = ["Active", "Expired"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status
